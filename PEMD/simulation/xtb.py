# Copyright (c) 2024. PEMD developers. All rights reserved.
# Distributed under the terms of the MIT License.

# ******************************************************************************
# Module Docstring
# ******************************************************************************

import subprocess
from PEMD.simulation.slurm import PEMDSlurm

class PEMDXtb:
    def __init__(
            self,
            work_dir,
            chg=0,
            mult=1,
            gfn=2
    ):
        """
        Initialize the PEMDXtb object for configuring the XTB run parameters.

        Args:
            work_dir (str): The path to the working directory where XTB output files will be saved.
            chg (int, optional): The charge of the system, default is 0.
            mult (int, optional): The spin multiplicity, default is 1.
            gfn (int, optional): Select geometry, frequency and non-covalent interactions (GFN) parametrization of the xTB method , default is 2.
        """
        self.work_dir = work_dir
        self.chg = chg
        self.mult = mult
        self.gfn = gfn

    def run_local(self, xyz_filename, xtb_dir, outfile_headname):
        """
        Execute the XTB tool locally to perform molecular optimization and other computations.

        Args:
            xyz_filename (str): The path to the input XYZ file containing the molecular coordinates.
            xtb_dir (str): The directory where xTB output files will be stored.
            outfile_headname (str): The prefix for the output files generated by XTB.

        Returns:
            str: The standard output from the XTB command if successful.
            str: The standard error output if the xTB command fails.

        Raises:
            subprocess.CalledProcessError: If the xTB command fails during execution.
        """
        command = (
            f"xtb {xyz_filename} --opt --chrg={self.chg} --uhf={self.mult} --gfn {self.gfn}  --ceasefiles "
            f"--namespace {xtb_dir}/{outfile_headname}"
        )
        try:
            result = subprocess.run(command, shell=True, check=True, text=True, capture_output=True)
            return result.stdout  # Return the standard output from the XTB command
        except subprocess.CalledProcessError as e:
            print(f"Error executing xTB: {e}")
            return e.stderr  # Return the error output if the command fails

    def gen_slurm(self, script_name, job_name, nodes, ntasks_per_node, partition):
        """
        Generate a SLURM script to submit a job for running XTB calculations.

        Parameters:
            script_name (str): The name of the SLURM script to be generated.
            job_name (str): The job name that will be used when submitting the job to the cluster.
            nodes (int): The number of nodes requested for the job.
            ntasks_per_node (int): The number of tasks to run per node.
            partition (str): The partition on the cluster where the job should be submitted.

        Returns:
            str: The file path of the generated SLURM script.
        """
        slurm_script = PEMDSlurm(
            self.work_dir,
            script_name,
        )

        # Using script "runxTB.sh" to perform xTB calculation.
        # Need to add its path as an environment variable firstly.
        slurm_script.add_command(
            f"bash runxTB.sh {self.chg} {self.mult} {self.gfn}"
        )

        # Generate the SLURM script
        script_path = slurm_script.generate_script(
            job_name,
            nodes,
            ntasks_per_node,
            partition,
        )
        return script_path
